---
import type { CollectionEntry } from 'astro:content';

interface Props {
  data: CollectionEntry<'experience'>
}

const { data: { data } } = Astro.props satisfies Props;

function handleTime(startDate: string, endDate?: string): string {
  const start = new Date(startDate)
  const end = endDate ? new Date(endDate) : new Date()


  const timeDiff = (end.getTime() - start.getTime()) / 1000
  const timeDiffInDays = Math.round(timeDiff / 60 / 60 / 24)
  const timeDiffInYears = Math.round((timeDiffInDays / 365) * 10) / 10;
  const years = Math.floor(timeDiffInYears);
  const months = Math.ceil((Math.round((timeDiffInYears % 1) * 10) / 10) * 12);

  return `P${
      years > 0 ? `${years}Y` : ''
    }${
      months > 0 ? `${months}M` : ''
    }`;
}
---

<div class="experience-section">
  <div class="experience-section--meta">
    <h2 class="experience-section--company">{data.company}</h2>
    <h3 class="experience-section--title">{data.title}</h3>
    <time datetime={handleTime(data.startDate, data.endDate)}>
      <span>
        {
          Intl.DateTimeFormat(
            'en-US',
            {
              month: '2-digit',
              year: 'numeric',
            }).format(new Date(data.startDate))
        }
      </span>
      <i class="fa-solid fa-arrow-right" />
      <span>
        {
          data.endDate !== ''
            ? Intl.DateTimeFormat(
                'en-US',
                {
                  month: '2-digit',
                  year: 'numeric',
                }).format(new Date(data.endDate))
            : 'Current'
        }
      </span>
    </time>
    <address>
      <i class="fa-light fa-location-dot" />
      <span>
        {data.location}
      </span>
    </address>
  </div>
  <div class="experience-section--content">
    {data.description ? (
      <div class="experience-section--description">
        {data.description}
      </div>
    ) : null}
    <ul class="responsibilities">
      {
        data.responsibilities
          .map(resp => typeof resp === 'string'
            ? <li>{resp}</li>
            : Object.keys(resp).map((key) => {
              return (
                <li>
                  {key}
                  <ul>
                    {resp[key].map(i => <li>{i}</li>)}
                  </ul>
                </li>
              )
            }))
      }
    </ul>
  </div>
</div>

<script>
  const sections = document.querySelectorAll('.experience-section');

  // sections.forEach((section) => {
  //   const meta = section.querySelector<HTMLElement>('.experience-section--meta')!;

  //   meta.style.opacity = '0';
  //   meta.style.transform = 'translateX(-50px)';
  // })

  const observer = new IntersectionObserver((entry) => {
    let prevRatio = 0.0;
    entry.forEach(e => {
      console.log(e.intersectionRatio, prevRatio, e.target);
      const meta = e.target.querySelector<HTMLElement>('.experience-section--meta')!;
      if (e.isIntersecting) {

        meta.animate([
          { opacity: 0, transform: `translateY(-50px)` },
          { opacity: 1, transform: `translateY(0px)` }
        ], { duration: 500 });

        meta.style.opacity = '1';
        meta.style.transform = 'translateX(0px)';
      } else {

        meta.animate([
          { opacity: 1, transform: `translateY(0px)` },
          { opacity: 0, transform: `translateY(-50px)` },
        ], { duration: 500 });
      }
      prevRatio = e.intersectionRatio;
    })
  }, { threshold: 0.5 })

  // observer.observe(sections);
  sections.forEach(item => observer.observe(item))
</script>

<style>
  .experience-section--company,
  .experience-section--title {
    font-weight: 400;
  }

.experience-section--company {
  margin-bottom: 0;
}

  .experience-section--title {
    color: rgb(var(--text-alt-color));
    margin-bottom: 0.25rem;
  }

  .experience-section--meta,
  .experience-section--content {
    display: flex;
    flex-flow: column;
    justify-content: center;
  }

  .experience-section--meta {
    flex-flow: column;
  }

  .experience-section--title,
  .experience-section--company {
    font-weight: 400;
    margin: 0 0 0.5rem;
  }

  address .svg-inline--fa {
    color: rgb(var(--link-color));
  }

  address {
    font-style: normal;
  }

  @media screen and (min-width: 800px) {

  .experience-section--company {
    background: linear-gradient(
      to right,
      rgb(var(--link-color)),
      rgb(var(--link-hover-color))
    );
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
  }

    .experience-section--company,
    .experience-section--title {
      text-align: right;
    }

    .experience-section {
      grid-column: 1 / span 2;
      display: grid;
      grid-template-columns: 35% 1fr;
      column-gap: 1rem;
      position: static;

    }

    .experience-section--meta {
      align-items: flex-end;
    }

    .experience-section--content {
      border-left: 1px solid rgba(var(--text-alt-color), 0.5);
      padding: 2rem 0 2rem 2rem;
    }
  }
</style>
